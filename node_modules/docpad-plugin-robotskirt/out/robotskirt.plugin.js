// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var RobotskirtPlugin, rs;
    rs = require('robotskirt');
    return RobotskirtPlugin = (function(_super) {

      __extends(RobotskirtPlugin, _super);

      RobotskirtPlugin.prototype.name = 'robotskirt';

      RobotskirtPlugin.prototype.config = {
        robotskirtOptions: {
          EXT_AUTOLINK: true,
          EXT_FENCED_CODE: true,
          EXT_LAX_SPACING: true,
          EXT_NO_INTRA_EMPHASIS: true,
          EXT_SPACE_HEADERS: true,
          EXT_STRIKETHROUGH: true,
          EXT_SUPERSCRIPT: true,
          EXT_TABLES: true,
          HTML_SKIP_HTML: false,
          HTML_SKIP_STYLE: false,
          HTML_SKIP_IMAGES: false,
          HTML_SKIP_LINKS: false,
          HTML_EXPAND_TABS: false,
          HTML_SAFELINK: false,
          HTML_TOC: false,
          HTML_HARD_WRAP: false,
          HTML_USE_XHTML: true,
          HTML_ESCAPE: false
        },
        smartypants: true,
        highlight: false,
        inline: false
      };

      RobotskirtPlugin.prototype.parser = null;

      function RobotskirtPlugin() {
        var config, extOpts, htmlOpts, name, opts, renderer;
        RobotskirtPlugin.__super__.constructor.apply(this, arguments);
        config = this.config;
        renderer = new rs.HtmlRenderer();
        if (config.highlight) {
          renderer.blockcode = config.highlight;
        }
        if (config.inline) {
          renderer.normal_text = function(src) {
            var blocks, hash, out, unhash;
            blocks = [];
            hash = function(text) {
              text = text.replace(/(^\n+|\n+$)/g, "");
              return "\n\n~K" + (blocks.push(text) - 1) + "K\n\n";
            };
            unhash = function(src) {
              return src.replace(/\n\n~K([0-9]+)K\n\n/g, function(whole, m1) {
                return blocks[m1];
              });
            };
            out = config.inline(src, hash);
            if (blocks.length > 0) {
              out = unhash(out);
            }
            return out;
          };
        }
        opts = config.robotskirtOptions;
        for (name in opts) {
          if (opts[name]) {
            if (name.indexOf('EXT_') === 0) {
              extOpts = extOpts || [];
              extOpts.push(rs[name]);
            }
            if (name.indexOf('HTML_') === 0) {
              htmlOpts = htmlOpts || [];
              htmlOpts.push(rs[name]);
            }
          }
        }
        this.parser = new rs.Markdown(renderer, extOpts, htmlOpts);
      }

      RobotskirtPlugin.prototype.render = function(opts, next) {
        var config, inExtension, outExtension;
        config = this.config;
        inExtension = opts.inExtension, outExtension = opts.outExtension;
        if ((inExtension === 'md' || inExtension === 'markdown') && (outExtension === null || outExtension === 'html')) {
          rs = require('robotskirt');
          opts.content = this.parser.render(opts.content);
          if (config.smartypants) {
            opts.content = rs.smartypantsHtml(opts.content);
          }
        }
        return next();
      };

      return RobotskirtPlugin;

    })(BasePlugin);
  };

}).call(this);
