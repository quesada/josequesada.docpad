// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var LivereloadPlugin;
  return LivereloadPlugin = (function(_super) {

    __extends(LivereloadPlugin, _super);

    function LivereloadPlugin() {
      return LivereloadPlugin.__super__.constructor.apply(this, arguments);
    }

    LivereloadPlugin.prototype.name = 'livereload';

    LivereloadPlugin.prototype.config = {
      enabled: false,
      inject: true,
      environments: {
        development: {
          enabled: true
        }
      }
    };

    LivereloadPlugin.prototype.populateCollections = function(opts) {
      var config, docpad, injectBlock, listenBlock, scriptsBlock;
      docpad = this.docpad;
      config = this.config;
      scriptsBlock = docpad.getBlock('scripts');
      listenBlock = "// Listen for the regenerated event\n// and perform a reload of the page when the event occurs\nvar socket = io.connect('/docpad-live-reload');\nsocket.on('regenerated',function(){\n	document.location.reload();\n});";
      injectBlock = "// Add the depedency if it doesn't already exist\nif ( typeof io === 'undefined' ) {\n	var t = document.createElement('script');\n	t.type = 'text/javascript';\n	t.async = true;\n	t.src = '/socket.io/socket.io.js';\n	t.onload = function(){\n\n" + listenBlock + "\n\n	};\n	var s = document.getElementsByTagName('script')[0];\n	s.parentNode.insertBefore(t,s);\n}";
      scriptsBlock.add("(function(){\n	" + (config.inject ? injectBlock : listenBlock) + "\n})();", {
        defer: false
      });
      return this;
    };

    LivereloadPlugin.prototype.serverAfter = function(opts) {
      var server, serverHttp;
      server = opts.server, serverHttp = opts.serverHttp;
      this.socket = require('socket.io').listen(serverHttp || server).of('/docpad-live-reload');
      return this;
    };

    LivereloadPlugin.prototype.generateAfter = function(opts) {
      var _ref;
      if ((_ref = this.socket) != null) {
        _ref.emit('regenerated');
      }
      return this;
    };

    return LivereloadPlugin;

  })(BasePlugin);
};
