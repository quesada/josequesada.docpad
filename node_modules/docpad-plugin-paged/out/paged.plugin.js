// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var PagedPlugin, balUtil;
  balUtil = require('bal-util');
  return PagedPlugin = (function(_super) {

    __extends(PagedPlugin, _super);

    function PagedPlugin() {
      return PagedPlugin.__super__.constructor.apply(this, arguments);
    }

    PagedPlugin.prototype.name = 'paged';

    PagedPlugin.prototype.docpadReady = function(opts, next) {
      var DocumentModel, docpad;
      docpad = opts.docpad;
      DocumentModel = docpad.DocumentModel;
      DocumentModel.prototype.getPagedUrl = function(pageNumber) {
        var baseName, firstPage, outExtension;
        firstPage = this.get('firstPageDoc');
        outExtension = firstPage.get('outExtension');
        baseName = firstPage.get('basename');
        if (pageNumber === 0) {
          return firstPage.get('url');
        }
        return firstPage.get('url').replace(outExtension, pageNumber + '.' + outExtension);
      };
      DocumentModel.prototype.hasNextPage = function() {
        var page;
        page = this.get('page');
        if (page.number < page.count - 1) {
          return true;
        }
        return false;
      };
      DocumentModel.prototype.getNextPage = function() {
        var page;
        page = this.get('page');
        if (page.number < page.count - 1) {
          return this.getPagedUrl(page.number + 1);
        }
        return '#';
      };
      DocumentModel.prototype.hasPrevPage = function() {
        var page;
        page = this.get('page');
        if (page.number > 0) {
          return true;
        }
        return false;
      };
      DocumentModel.prototype.getPrevPage = function() {
        var page;
        page = this.get('page');
        if (page.number > 0) {
          return this.getPagedUrl(page.number - 1);
        }
        return '#';
      };
      return next();
    };

    PagedPlugin.prototype.renderBefore = function(opts, next) {
      var collection, docpad, pagesToRender, tasks, templateData;
      docpad = this.docpad;
      collection = opts.collection, templateData = opts.templateData;
      pagesToRender = new docpad.FilesCollection();
      collection.forEach(function(document) {
        var lastDoc, meta, n, numberOfPages, pageSize, pagedCollection, pagedCollectionName, pagedDoc, pagedDocData, _i, _ref, _results;
        meta = document.getMeta();
        if (!meta.get('isPaged')) {
          docpad.log('debug', 'Document ' + document.get('basename') + ' is not paged');
          return;
        }
        numberOfPages = meta.get('pageCount') || 1;
        pageSize = meta.get('pageSize') || 5;
        lastDoc = pageSize * numberOfPages;
        if (meta.get('pagedCollection')) {
          pagedCollectionName = meta.get('pagedCollection');
          pagedCollection = docpad.getCollection(pagedCollectionName);
          numberOfPages = Math.ceil(pagedCollection.length / pageSize);
          lastDoc = pagedCollection.length;
        }
        docpad.log('debug', 'Document ' + document.get('basename') + ' has ' + numberOfPages + ' pages');
        document.set({
          page: {
            count: numberOfPages,
            number: 0,
            size: pageSize,
            startIdx: 0,
            endIdx: Math.min(pageSize, lastDoc)
          }
        });
        document.set({
          firstPageDoc: document
        });
        if (numberOfPages > 1) {
          _results = [];
          for (n = _i = 1, _ref = numberOfPages - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; n = 1 <= _ref ? ++_i : --_i) {
            pagedDocData = document.toJSON();
            pagedDoc = docpad.createDocument(pagedDocData);
            pagedDoc.set({
              page: {
                count: numberOfPages,
                number: n,
                size: pageSize,
                startIdx: n * pageSize,
                endIdx: Math.min((n * pageSize) + pageSize, lastDoc)
              }
            });
            pagedDoc.set({
              firstPageDoc: document
            });
            _results.push(pagesToRender.add(pagedDoc));
          }
          return _results;
        }
      });
      tasks = new balUtil.Group(next);
      pagesToRender.forEach(function(document) {
        tasks.push(function(complete) {
          docpad.log('debug', 'Normalizing paging document ' + document.get('basename'));
          return document.normalize({}, complete);
        });
        tasks.push(function(complete) {
          docpad.log('debug', 'Contextualizing paging document ' + document.get('basename'));
          return document.contextualize({}, complete);
        });
        return tasks.push(function(complete) {
          var basename, outFilename, outPath, page;
          page = document.get('page');
          basename = document.get('basename');
          outFilename = document.get('outFilename');
          outPath = document.get('outPath');
          outFilename = outFilename.replace(basename, basename + '.' + page.number);
          outPath = outPath.replace(basename, basename + '.' + page.number);
          basename = basename + '.' + page.number;
          docpad.log('debug', 'Renaming paging document ' + document.get('basename') + ' to ' + basename);
          document.set('basename', basename);
          document.set('outFilename', outFilename);
          document.set('outPath', outPath);
          return complete();
        });
      });
      this.pagesToRender = pagesToRender;
      return tasks.async();
    };

    PagedPlugin.prototype.renderAfter = function(opts, next) {
      var docpad, pagesToRender, tasks;
      docpad = this.docpad;
      pagesToRender = this.pagesToRender;
      if (pagesToRender.length > 0) {
        docpad.log('debug', 'Rendering ' + pagesToRender.length + ' paged documents');
        tasks = new balUtil.Group(next);
        pagesToRender.forEach(function(document) {
          tasks.push(function(complete) {
            return document.render({
              templateData: docpad.getTemplateData()
            }, complete);
          });
          return tasks.push(function(complete) {
            return document.writeRendered(complete);
          });
        });
        return tasks.async();
      } else {
        return next();
      }
    };

    return PagedPlugin;

  })(BasePlugin);
};
