// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

module.exports = function(BasePlugin) {
  var PartialsPlugin, balUtil, pathUtil, util;
  balUtil = require('bal-util');
  pathUtil = require('path');
  util = require('util');
  return PartialsPlugin = (function(_super) {

    __extends(PartialsPlugin, _super);

    PartialsPlugin.prototype.name = 'partials';

    PartialsPlugin.prototype.config = {
      partialsPath: 'partials'
    };

    PartialsPlugin.prototype.locale = {
      addingPartial: "Adding partial: %s",
      partialNotFound: "The partial \"%s\" was not found, as such it will not be rendered.",
      renderPartial: "Rendering partial: %s",
      renderedPartial: "Rendered partial: %s",
      renderPartialFailed: "Rendering partial failed: %s. The error follows:"
    };

    PartialsPlugin.prototype.foundPartials = null;

    PartialsPlugin.prototype.partialsCache = null;

    function PartialsPlugin() {
      var config, docpad;
      PartialsPlugin.__super__.constructor.apply(this, arguments);
      docpad = this.docpad;
      config = this.config;
      config.partialsPath = pathUtil.resolve(docpad.config.srcPath, config.partialsPath);
      this.foundPartials = [];
      this.partialsCache = {};
    }

    PartialsPlugin.prototype.renderPartialSync = function(name, data) {
      var config, id, partial;
      config = this.config;
      id = Math.random();
      partial = {
        id: id,
        name: name,
        data: data,
        path: pathUtil.join(config.partialsPath, name),
        container: "[partial:" + id + "]"
      };
      this.foundPartials.push(partial);
      return partial.container;
    };

    PartialsPlugin.prototype.renderPartial = function(partial, next) {
      var cacheable, docpad, err, locale, message, partialsCache, result, _ref, _ref1, _ref2;
      docpad = this.docpad;
      locale = this.locale;
      partialsCache = this.partialsCache;
      result = null;
      if ((_ref = partial.document) == null) {
        partial.document = docpad.getCollection('partials').fuzzyFindOne(partial.path);
      }
      if (!partial.document) {
        message = util.format(locale.partialNotFound, partial.name);
        err = new Error(message);
        if (err) {
          return next(err);
        }
      }
      cacheable = (_ref1 = partial.document.getMeta().get('cacheable')) != null ? _ref1 : false;
      if (cacheable === true) {
        result = (_ref2 = partialsCache[partial.path]) != null ? _ref2 : null;
      }
      if (result != null) {
        return next(null, result);
      } else {
        docpad.renderDocument(partial.document, {
          templateData: partial.data
        }, function(err, result, document) {
          if (err) {
            return next(err);
          }
          if (cacheable === true) {
            partialsCache[partial.path] = result;
          }
          return next(null, result);
        });
      }
      return this;
    };

    PartialsPlugin.prototype.populateCollections = function(opts, next) {
      var config, docpad;
      config = this.config;
      docpad = this.docpad;
      docpad.parseDocumentDirectory({
        path: config.partialsPath
      }, next);
      return this;
    };

    PartialsPlugin.prototype.extendCollections = function(opts) {
      var config, docpad, locale;
      config = this.config;
      docpad = this.docpad;
      locale = this.locale;
      docpad.setCollection('partials', docpad.database.createLiveChildCollection().setQuery('isLayout', {
        $or: {
          isPartial: true,
          fullPath: {
            $startsWith: config.partialsPath
          }
        }
      }).on('add', function(model) {
        var _base, _base1, _base2, _ref, _ref1, _ref2;
        docpad.log('debug', util.format(locale.addingPartial, model.attributes.fullPath));
        if ((_ref = (_base = model.attributes).isPartial) == null) {
          _base.isPartial = true;
        }
        if ((_ref1 = (_base1 = model.attributes).render) == null) {
          _base1.render = false;
        }
        return (_ref2 = (_base2 = model.attributes).write) != null ? _ref2 : _base2.write = false;
      }));
      return this;
    };

    PartialsPlugin.prototype.extendTemplateData = function(_arg) {
      var me, templateData;
      templateData = _arg.templateData;
      me = this;
      templateData.partial = function() {
        var data, name, objs, _ref;
        name = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (typeof this.referencesOthers === "function") {
          this.referencesOthers();
        }
        if (objs.length >= 2) {
          objs.unshift({});
          data = balUtil.shallowExtendPlainObjects.apply(balUtil, objs);
        } else {
          data = (_ref = objs[0]) != null ? _ref : {};
        }
        return me.renderPartialSync(name, data);
      };
      return this;
    };

    PartialsPlugin.prototype.renderDocument = function(opts, next) {
      var config, docpad, file, foundPartials, locale, me, tasks, templateData;
      templateData = opts.templateData, file = opts.file;
      me = this;
      docpad = this.docpad;
      locale = this.locale;
      config = this.config;
      foundPartials = this.foundPartials;
      tasks = new balUtil.Group(next);
      balUtil.each(foundPartials, function(partial) {
        return tasks.push(function(complete) {
          if (opts.content.indexOf(partial.container) === -1) {
            return complete();
          }
          docpad.log('debug', util.format(locale.renderPartial, partial.name));
          return me.renderPartial(partial, function(err, contentRendered) {
            var message;
            if (err) {
              message = util.format(locale.renderPartialFailed, partial.name);
              docpad.warn(message, err);
            } else {
              docpad.log('debug', util.format(locale.renderedPartial, partial.name));
              opts.content = opts.content.replace(partial.container, contentRendered);
            }
            return complete();
          });
        });
      });
      tasks.async();
      return this;
    };

    PartialsPlugin.prototype.generateAfter = function() {
      this.foundPartials = [];
      return this.partialsCache = {};
    };

    return PartialsPlugin;

  })(BasePlugin);
};
