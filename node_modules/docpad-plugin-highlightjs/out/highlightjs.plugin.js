// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var HighlightjsPlugin, balUtil, cache, extendr, hljs, _ref;

  extendr = require('extendr');
  balUtil = require('bal-util');
  hljs = require('highlight.js');
  cache = {};
  return HighlightjsPlugin = (function(_super) {
    var extractLanguage;

    __extends(HighlightjsPlugin, _super);

    function HighlightjsPlugin() {
      _ref = HighlightjsPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HighlightjsPlugin.prototype.name = 'highlightjs';

    HighlightjsPlugin.prototype.config = {
      replaceTab: null,
      transforms: null,
      escape: false,
      removeIndentation: false,
      aliases: {
        coffee: 'coffeescript',
        rb: 'ruby',
        js: 'javascript',
        html: 'xml',
        htm: 'xml',
        eco: 'xml',
        erb: 'xml',
        phtml: 'xml'
      }
    };

    extractLanguage = function(str) {
      var matches;

      str = (str || '').toLowerCase();
      if (/no[-]?highlight|none/i.test(str)) {
        return 'no-highlight';
      }
      matches = str.match(/lang(?:uage)?-\w+/g);
      if (matches) {
        return matches.pop().match(/lang(?:uage)?-(\w+)/)[1];
      }
      if (str.indexOf(' ') === -1) {
        return str;
      }
      return '';
    };

    HighlightjsPlugin.prototype.highlightSource = function(opts) {
      var aliases, config, docpad, err, escape, language, next, removeIndentation, replaceTab, result, source, transform, transforms, _i, _len, _ref1;

      docpad = this.docpad;
      source = opts.source, language = opts.language, next = opts.next;
      config = extendr.extend({}, this.config, opts.config);
      escape = config.escape, replaceTab = config.replaceTab, aliases = config.aliases, transforms = config.transforms, removeIndentation = config.removeIndentation;
      if (removeIndentation !== false) {
        source = balUtil.removeIndentation(source);
      }
      language = extractLanguage(language);
      result = source;
      if (language !== 'no-highlight') {
        if (escape !== true) {
          source = require('ent').decode(source);
        }
        _ref1 = transforms || [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          transform = _ref1[_i];
          if (transform instanceof Function) {
            source = transform(source, language);
          } else if (transform instanceof Array && transform.length === 2) {
            source = source.replace(transform[0], transform[1]);
          }
        }
        if (replaceTab) {
          hljs.fixMarkup(source, replaceTab);
        }
        try {
          if (language && aliases[language]) {
            language = aliases[language];
          }
          if (language) {
            if (hljs.LANGUAGES[language] != null) {
              result = hljs.highlight(language, source);
            } else {
              docpad.warn("Highlight.js: Syntax highlight definition does not exist for language: " + language + "\nYour probably want to add an alias for this language to one that we do support\nMore information here: https://github.com/docpad/docpad-plugin-highlightjs#language-aliases");
              result = hljs.highlightAuto(source);
            }
          } else {
            result = hljs.highlightAuto(source);
          }
          language = result.language;
          result = result.value;
        } catch (_error) {
          err = _error;
          if (err) {
            return next(err);
          }
        }
      }
      result = "<pre class=\"highlighted\"><code class=\"" + language + "\">" + result + "</code></pre>";
      next(null, result);
      return this;
    };

    HighlightjsPlugin.prototype.renderDocument = function(opts, next) {
      var cacheKey, cacheResult, extension, file, plugin, _ref1;

      extension = opts.extension, file = opts.file;
      plugin = this;
      if (file.type === 'document' && extension === 'html') {
        cacheKey = opts.content + ((_ref1 = file.attributes.plugins) != null ? _ref1.highlightjs : void 0);
        cacheResult = cache[cacheKey];
        if (cacheResult) {
          opts.content = cacheResult;
          return next();
        }
        return balUtil.replaceElementAsync({
          html: opts.content,
          element: 'pre',
          removeIndentation: false,
          replace: function(outerHTML, elementNameMatched, attributes, innerHTML, replaceElementCompleteCallback) {
            var classes;

            classes = balUtil.getAttribute(attributes, 'class') || '';
            if (classes.indexOf('highlighted') !== -1) {
              return replaceElementCompleteCallback(null, outerHTML);
            }
            return balUtil.replaceElementAsync({
              html: innerHTML,
              element: 'code',
              removeIndentation: false,
              replace: function(outerHTML, elementNameMatched, attributes, innerHTML, replaceElementCompleteCallback) {
                var _ref2;

                classes = balUtil.getAttribute(attributes, 'class') || '';
                return plugin.highlightSource({
                  source: innerHTML,
                  language: classes,
                  config: (_ref2 = file.attributes.plugins) != null ? _ref2.highlightjs : void 0,
                  next: replaceElementCompleteCallback
                });
              },
              next: replaceElementCompleteCallback
            });
          },
          next: function(err, result) {
            if (err) {
              return next(err);
            }
            opts.content = result;
            cache[cacheKey] = result;
            return next();
          }
        });
      } else {
        return next();
      }
    };

    return HighlightjsPlugin;

  })(BasePlugin);
};
